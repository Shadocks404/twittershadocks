{"version":3,"sources":["firebase/base.js","hooks/authUser.js","components/Header.js","components/Formulaire.js","hooks/useForm.js","utils/validateMessage.js","components/creactMessage.js","components/ImageContenaire.js","components/Message.js","components/MessageListe.js","pages/App.js","serviceWorker.js","index.js"],"names":["firebaseApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","login","nom","a","auth","signInWithPopup","logout","signOut","app","initializeApp","this","facebookProvider","FacebookAuthProvider","googleProvider","GoogleAuthProvider","db","firestore","AuthUser","useState","checkAuthUser","setCheckAuthUser","useEffect","unSubscribe","onAuthStateChanged","user","Header","className","type","onClick","Formulaire","handleSubmit","handleKeyDown","handleChange","values","errors","photoProfil","onSubmit","src","alt","value","onChange","onKeyDown","style","resize","name","placeholder","message","length","disabled","useForm","initalState","next","validation","setValue","setErrors","isSubmit","setIsSubmit","Object","keys","e","preventDefault","event","keyCode","persist","target","validateMessage","INITALE_STATE","Messages","CreactMessage","newMessage","postedBy","id","uid","displayName","like","createAt","Date","now","photo","photoURL","collection","add","ImageContenaire","children","color","count","isLike","props","Message","setIsLike","some","likeBy","formatDistanceToNow","locale","fr","previsLike","Ref","doc","updatedLike","filter","update","likes","delete","MessageListe","messages","setMessages","handleSnapshot","snapshot","docs","map","data","orderBy","onSnapshot","item","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffdfe218.chunk.js","sourcesContent":["import app, { firestore } from 'firebase/app';\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\n\nlet firebaseApp = {\n    apiKey: \"AIzaSyB0HiBNNJwQ_sMVNJpKI5ZbDOsOlR569kc\",\n    authDomain: \"twitter-5fc71.firebaseapp.com\",\n    databaseURL: \"https://twitter-5fc71.firebaseio.com\",\n    projectId: \"twitter-5fc71\",\n    storageBucket: \"twitter-5fc71.appspot.com\",\n    messagingSenderId: \"1064221797911\",\n    appId: \"1:1064221797911:web:051fbbead5dfb994e67652\",\n    measurementId: \"G-KRNV8GQYRC\"\n}\nclass Firebase {\n    constructor(){\n        app.initializeApp(firebaseApp)\n        this.auth = app.auth()\n        this.facebookProvider = new app.auth.FacebookAuthProvider()    \n        this.googleProvider = new app.auth.GoogleAuthProvider()    \n        this.db = firestore()\n    }\n    \n    login = async (nom) => await this.auth.signInWithPopup(this[`${nom}Provider`])\n    logout = async () => await this.auth.signOut()\n\n}\n\nlet firebase = new Firebase()\n\nexport default firebase","import {useState, useEffect} from 'react'\nimport firebase from '../firebase/base';\n\n\nlet AuthUser = () =>{\n    let [checkAuthUser, setCheckAuthUser] = useState(null)\n    useEffect(()=>{\n        let unSubscribe = firebase.auth.onAuthStateChanged(user =>{\n            if(user){\n                setCheckAuthUser(user)\n            }else{\n                setCheckAuthUser(null)\n            }\n        })\n        return () => unSubscribe()\n    }, [])\n    return checkAuthUser\n}\n\n\nexport default AuthUser\n","import React from 'react'\nimport firebase from '../firebase/base';\nimport AuthUser from '../hooks/authUser';\nimport GoogleButton from 'react-google-button';\n\nfunction Header() {\n    let user = AuthUser()\n    return (\n        <div className='header'>\n            <h1 className=\"header-title\">Twitter</h1>\n            {user ? (<button type=\"button\" onClick={() => firebase.logout()} \n            className=\"login-btn\"> Logout </button>) : (<GoogleButton onClick={() => firebase.login(\"google\")}/>)}\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nfunction Formulaire({handleSubmit, handleKeyDown,handleChange, values, errors, photoProfil}) {\n\n    return (\n        <form className='message-form-container' onSubmit={handleSubmit}>\n            <div className=\"message-form\">\n                <div>\n                    <img className= \"profil-picture\" src={photoProfil} alt=\"profil\"/>\n                </div>\n                <textarea value={values} onChange={handleChange} onKeyDown={handleKeyDown} style= {{resize: \"none\"}} name=\"message\" placeholder=\"Quoi de neuf ?\"/>\n            </div>\n                {errors.message ? <p className='error-text'>{errors.message}</p> : null}\n            <footer>\n                <p>{280 - values.length}</p>\n            <button type=\"submit\" disabled={values.length == 0 || values.length > 280}>Twitter</button>\n            </footer>\n        </form>\n    )\n}\n\nexport default Formulaire\n","import  { useState , useEffect} from 'react';\n\nfunction useForm(initalState, next, validation) {\n\n    let [value, setValue] = useState(initalState) \n    let [errors, setErrors] = useState({})\n    let [isSubmit, setIsSubmit] = useState(false)\n\n    useEffect(() => {\n        if(isSubmit){\n            let isError = Object.keys(errors) != 0\n            if(isError){\n                setIsSubmit(false);\n            }else{\n                next()\n                setIsSubmit(false)\n                setValue(initalState)\n            }\n        }\n    }, [isSubmit, next, errors, initalState]);\n\n    let handleKeyDown = (event) =>{\n        if(event.keyCode === 13 ){\n            event.preventDefault();\n            let errors = validation(value)\n            setErrors(errors)\n            setIsSubmit(true)\n        }\n    }\n\n    let handleSubmit = (e) => {\n        e.preventDefault();\n        let errors = validation(value)\n        setErrors(errors)\n        setIsSubmit(true)\n    }\n\n    let handleChange = e =>{\n        e.persist();\n        setValue(()=>({\n            [e.target.name] : e.target.value\n        }))\n    }\n\n    return {handleSubmit, handleKeyDown, handleChange , value, errors}\n}\n\nexport default useForm\n","let validateMessage  = (value) => {\n    let errors = {}\n    if(!value.message){\n        errors.message = 'Le message est requis'\n    }\n    else if(value.message.length > 280){\n        errors.message = 'Le message fait plus de 280 caractères'\n    }\n    return errors\n}\n\nexport default validateMessage","import React from 'react'\nimport Formulaire from './Formulaire';\nimport useForm from '../hooks/useForm';\nimport validateMessage from '../utils/validateMessage';\nimport AuthUser from '../hooks/authUser';\nimport firebase from '../firebase/base';\n\nlet INITALE_STATE = {\n    message: \"\",\n    Messages: {}\n}\n\nfunction CreactMessage() {\n    let user = AuthUser()\n    \n    let handleCreateMessage = async () =>{\n        let newMessage = {\n            message: value.message,\n            postedBy: {\n                id: user.uid,\n                name: user.displayName\n            },\n            like: [],\n            createAt: Date.now(),\n            photo: user.photoURL\n        }\n        await firebase.db.collection('messages').add(newMessage)\n    }\n    \n \n\n    let {handleSubmit, handleKeyDown, handleChange, value, errors} = useForm(INITALE_STATE, handleCreateMessage, validateMessage)\n\n    \n    return (\n        <>\n    {user ? <Formulaire photoProfil={user.photoURL} handleKeyDown={handleKeyDown} handleChange={handleChange} handleSubmit={handleSubmit} values={value.message} errors = {errors}/>: null}\n    </> \n    )\n}\n\nexport default CreactMessage\n","import React  from 'react'\n\nfunction ImageContenaire({children, color, count, isLike, ...props}) {\n    return (\n        <div className={`icon-group ${isLike ? 'icon-isLike' : null }`} {...props}>\n            <div className={`icon-container icon-${color}`}>\n                {children}\n            </div>\n             {count > 0 && <p className={`icon-text icon-text-${color}`}>{count}</p>}\n        </div>\n    )\n}\n\nexport default ImageContenaire\n","import React , {useState, useEffect} from 'react'\nimport {FiHeart,FiX,FiMessageCircle,FiUpload,FiRefreshCw } from 'react-icons/fi'\nimport { formatDistanceToNow } from 'date-fns'\nimport { fr } from 'date-fns/locale'\nimport ImageContenaire from './ImageContenaire';\nimport firebase from '../firebase/base';\n\nfunction Message({newMessage, user}) {\n    let [isLike, setIsLike] = useState(false)\n\n    useEffect(()=>{\n        if(user){\n            let isLike = newMessage.like.some(like => like.likeBy.id == user.uid)\n            setIsLike(isLike)\n        }\n    }, [newMessage.like, user])\n\n    let handledelete = () =>{\n        if(user && newMessage.postedBy.id == user.uid){\n            let ref = firebase.db.collection(\"messages\").doc(newMessage.id)\n            ref.delete()\n        }\n    }\n\n    let like = () => {\n        setIsLike(previsLike => !previsLike)\n        let Ref = firebase.db.collection(\"messages\").doc(newMessage.id)\n        if(!isLike){\n            let likes = {likeBy: {id : user.uid , name : user.displayName}}\n            let updatedLike = [...newMessage.like, likes ]\n            Ref.update({like : updatedLike})\n        }else{\n            let updatedLike = newMessage.like.filter((like) => (\n                like.likeBy.id !== user.uid\n            ))\n            Ref.update({like : updatedLike})\n        }\n\n    }\n    return (\n        \n            <div className=\"message-container\"> \n            <div>\n                <img className= \"profil-picture\" src={newMessage.photo} alt=\"profil\"/>\n            </div>\n        <div className=\"message\">\n            <header>\n                <h3>\n                    {newMessage.postedBy.name}\n                </h3>\n                    <span> •  {formatDistanceToNow(newMessage.createAt,{locale: fr})}</span>\n                </header>\n                <p>\n                   {newMessage.message}\n                </p>\n\n            \n            {user ? <footer>\n            <ImageContenaire color=\"blue\" count='1'>\n            <FiMessageCircle/>\n            </ImageContenaire>\n\n            <ImageContenaire color=\"green\">\n               <FiRefreshCw/> \n            </ImageContenaire>\n            \n            <ImageContenaire color=\"red\" onClick={like} count={newMessage.like.length} isLike={isLike}>\n               <FiHeart/> \n            </ImageContenaire >\n            \n            <ImageContenaire color=\"blue\">\n                <FiUpload/>\n            </ImageContenaire >\n\n            <ImageContenaire color=\"red\" onClick={handledelete}>\n                <FiX/>\n            </ImageContenaire>\n            \n            </footer> : null}\n\n        </div>\n    </div>\n    )\n}\n\nexport default Message\n","import React, {useState, useEffect} from 'react'\nimport firebase from '../firebase/base';\nimport Message from './Message';\nimport AuthUser from '../hooks/authUser';\n\nfunction MessageListe() {\n    let user = AuthUser()\n    let [messages, setMessages] = useState([])\n\n    let handleSnapshot = (snapshot) =>{\n\n        let messages = snapshot.docs.map((doc) => ({id: doc.id , ...doc.data()}))\n        setMessages(messages)\n    }\n\n    useEffect(() => {\n        let getMessage = () =>{\n             firebase.db.collection('messages').orderBy(\"createAt\", \"desc\").onSnapshot(handleSnapshot)\n        }\n        return getMessage()\n    }, [firebase])\n    \n    return (\n        <div>\n       {messages.map((item, key) => <Message  newMessage={item} key={key} user={user}/>)}\n    </div>\n    )\n}\n\nexport default MessageListe\n","import React from 'react'\r\nimport '../styles/App.css'\r\nimport Header from '../components/Header'\r\nimport CreactMessage from \"../components/creactMessage\"\r\nimport MessageListe from '../components/MessageListe';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='app'>\r\n      <Header/>\r\n      <CreactMessage/>\r\n      <MessageListe/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './pages/App'\r\nimport 'sanitize.css'\r\nimport 'sanitize.css/forms.css'\r\nimport 'sanitize.css/typography.css'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}